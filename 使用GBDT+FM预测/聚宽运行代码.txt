# 导入函数库
import pandas as pd
from jqdata import *
from jqfactor import Factor
from jqlib.optimizer import *
# 初始化函数，设定基准等等
def initialize(context):
    # 设定沪深300作为基准
    set_benchmark('000300.XSHG')
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')

    g.a =[['600277.XSHG', '600153.XSHG', '000725.XSHE', '601818.XSHG', '600027.XSHG', '600362.XSHG', '600058.XSHG', '600050.XSHG', '600309.XSHG', '000039.XSHE'], ['601688.XSHG', '601668.XSHG', '600741.XSHG', '600153.XSHG', '601928.XSHG', '000063.XSHE', '601377.XSHG', '000783.XSHE', '000686.XSHE', '601390.XSHG'], ['000783.XSHE', '600048.XSHG', '600100.XSHG', '601618.XSHG', '601601.XSHG', '002146.XSHE', '600999.XSHG', '600068.XSHG', '601688.XSHG', '600104.XSHG'], ['600038.XSHG', '000002.XSHE', '600104.XSHG', '600362.XSHG', '000960.XSHE', '600011.XSHG', '000503.XSHE', '601186.XSHG', '600188.XSHG', '600547.XSHG'], ['600267.XSHG', '600089.XSHG', '603993.XSHG', '600221.XSHG', '000999.XSHE', '002236.XSHE', '600008.XSHG', '600058.XSHG', '600188.XSHG', '000338.XSHE'], ['600717.XSHG', '600739.XSHG', '603000.XSHG', '600998.XSHG', '600875.XSHG', '600048.XSHG', '601857.XSHG', '000156.XSHE', '600633.XSHG', '601607.XSHG'], ['600633.XSHG', '601607.XSHG', '601600.XSHG', '300146.XSHE', '600485.XSHG', '600332.XSHG', '000046.XSHE', '002653.XSHE', '600998.XSHG', '601118.XSHG'], ['600085.XSHG', '600028.XSHG', '002422.XSHE', '600271.XSHG', '300133.XSHE', '002456.XSHE', '601607.XSHG', '600717.XSHG', '601818.XSHG', '601998.XSHG'], ['600048.XSHG', '600660.XSHG', '600177.XSHG', '600674.XSHG', '600015.XSHG', '000001.XSHE', '603288.XSHG', '601929.XSHG', '600741.XSHG', '601009.XSHG'], ['600688.XSHG', '002415.XSHE', '600578.XSHG', '000425.XSHE', '601098.XSHG', '600827.XSHG', '300133.XSHE', '002236.XSHE', '002399.XSHE', '600547.XSHG'], ['600674.XSHG', '000503.XSHE', '002007.XSHE', '300002.XSHE', '000778.XSHE', '601390.XSHG', '601398.XSHG', '600011.XSHG', '600015.XSHG', '600118.XSHG'], ['300015.XSHE', '300003.XSHE', '600837.XSHG', '002736.XSHE', '002236.XSHE', '600000.XSHG', '002475.XSHE', '002195.XSHE', '002470.XSHE', '600519.XSHG'], ['600036.XSHG', '601336.XSHG', '000963.XSHE', '601166.XSHG', '601788.XSHG', '600340.XSHG', '601009.XSHG', '600109.XSHG', '000623.XSHE', '600804.XSHG'], ['601009.XSHG', '000963.XSHE', '000001.XSHE', '000423.XSHE', '600660.XSHG', '601088.XSHG', '002304.XSHE', '600060.XSHG', '601169.XSHG', '000538.XSHE'], ['601009.XSHG', '002142.XSHE', '601166.XSHG', '600104.XSHG', '002415.XSHE', '600015.XSHG', '600350.XSHG', '600999.XSHG', '600827.XSHG', '000712.XSHE'], ['000001.XSHE', '600350.XSHG', '600015.XSHG', '000963.XSHE', '600741.XSHG', '600717.XSHG', '000778.XSHE', '000686.XSHE', '000402.XSHE', '600221.XSHG'], ['000001.XSHE', '000538.XSHE', '600741.XSHG', '600317.XSHG', '002304.XSHE', '601607.XSHG', '002142.XSHE', '600015.XSHG', '600104.XSHG', '601336.XSHG'], ['000001.XSHE', '600518.XSHG', '000623.XSHE', '000538.XSHE', '601607.XSHG', '002008.XSHE', '600066.XSHG', '601216.XSHG', '000895.XSHE', '601009.XSHG'], ['300015.XSHE', '600519.XSHG', '600276.XSHG', '300003.XSHE', '000963.XSHE', '000709.XSHE', '600959.XSHG', '002304.XSHE', '600118.XSHG', '002252.XSHE'], ['000999.XSHE', '601088.XSHG', '601328.XSHG', '601288.XSHG', '600867.XSHG', '600016.XSHG', '601818.XSHG', '002008.XSHE', '002422.XSHE', '601166.XSHG'], ['600048.XSHG', '000002.XSHE', '601088.XSHG', '600519.XSHG', '600252.XSHG', '600816.XSHG', '000776.XSHE', '002294.XSHE', '600795.XSHG', '600276.XSHG'], ['000776.XSHE', '600016.XSHG', '000069.XSHE', '600900.XSHG', '600642.XSHG', '600741.XSHG', '000027.XSHE', '600011.XSHG', '600276.XSHG', '000423.XSHE'], ['600030.XSHG', '600048.XSHG', '601857.XSHG', '600741.XSHG', '601117.XSHG', '601607.XSHG', '000338.XSHE', '600875.XSHG', '600019.XSHG', '600028.XSHG'], ['601600.XSHG', '601006.XSHG', '600028.XSHG', '600741.XSHG', '000800.XSHE', '600048.XSHG', '601899.XSHG', '601288.XSHG', '600221.XSHG', '600886.XSHG'], ['601398.XSHG', '600023.XSHG', '601601.XSHG', '000001.XSHE', '601988.XSHG', '600886.XSHG', '600688.XSHG', '601899.XSHG', '601111.XSHG', '600221.XSHG'], ['600886.XSHG', '601766.XSHG', '600170.XSHG', '600741.XSHG', '600023.XSHG', '600795.XSHG', '000963.XSHE', '600519.XSHG', '000027.XSHE', '601989.XSHG'], ['600023.XSHG', '601989.XSHG', '000709.XSHE', '601899.XSHG', '000157.XSHE', '600519.XSHG', '601111.XSHG', '601600.XSHG', '601225.XSHG', '000338.XSHE'], ['600068.XSHG', '601899.XSHG', '600795.XSHG', '600585.XSHG', '601618.XSHG', '601607.XSHG', '000423.XSHE', '601006.XSHG', '601328.XSHG', '601600.XSHG'], ['600018.XSHG', '002142.XSHE', '601398.XSHG', '601988.XSHG', '600795.XSHG', '600660.XSHG', '600741.XSHG', '601288.XSHG', '600104.XSHG', '601006.XSHG'], ['600104.XSHG', '000423.XSHE', '600660.XSHG', '002236.XSHE', '002142.XSHE', '600188.XSHG', '600066.XSHG', '601601.XSHG', '600741.XSHG', '000568.XSHE'], ['601318.XSHG', '000623.XSHE', '600309.XSHG', '600340.XSHG', '601877.XSHG', '002174.XSHE', '600660.XSHG', '300124.XSHE', '600018.XSHG', '002714.XSHE'], ['000858.XSHE', '600739.XSHG', '600519.XSHG', '601628.XSHG', '600030.XSHG', '601318.XSHG', '002241.XSHE', '601225.XSHG', '600309.XSHG', '601877.XSHG'], ['601216.XSHG', '601225.XSHG', '601318.XSHG', '600804.XSHG', '000858.XSHE', '300124.XSHE', '600739.XSHG', '600663.XSHG', '600309.XSHG', '002008.XSHE'], ['601601.XSHG', '600036.XSHG', '601318.XSHG', '600519.XSHG', '002310.XSHE', '000858.XSHE', '002142.XSHE', '600009.XSHG', '601997.XSHG', '600739.XSHG'], ['000651.XSHE', '600637.XSHG', '600019.XSHG', '600000.XSHG', '300124.XSHE', '002008.XSHE', '000333.XSHE', '600036.XSHG', '600309.XSHG', '000423.XSHE'], ['601318.XSHG', '002027.XSHE', '000895.XSHE', '600276.XSHG', '000623.XSHE', '601628.XSHG', '002304.XSHE', '600340.XSHG', '601601.XSHG', '300124.XSHE'], ['600519.XSHG', '000963.XSHE', '601288.XSHG', '601766.XSHG', '002304.XSHE', '300015.XSHE', '002044.XSHE', '600000.XSHG', '002714.XSHE', '000002.XSHE'], ['002044.XSHE', '000423.XSHE', '000538.XSHE', '601088.XSHG', '002304.XSHE', '300015.XSHE', '002027.XSHE', '000725.XSHE', '000895.XSHE', '000963.XSHE'], ['002044.XSHE', '000538.XSHE', '600900.XSHG', '002153.XSHE', '002555.XSHE', '601166.XSHG', '002027.XSHE', '300003.XSHE', '000402.XSHE', '002624.XSHE'], ['600519.XSHG', '002294.XSHE', '601166.XSHG', '600518.XSHG', '300033.XSHE', '601088.XSHG', '601857.XSHG', '600900.XSHG', '002007.XSHE', '600373.XSHG'], ['002831.XSHE', '000963.XSHE', '601088.XSHG', '000538.XSHE', '600100.XSHG', '002411.XSHE', '002294.XSHE', '600436.XSHG', '300070.XSHE', '600739.XSHG'], ['603833.XSHG', '600016.XSHG', '600023.XSHG', '601888.XSHG', '002007.XSHE', '600519.XSHG', '300122.XSHE', '002352.XSHE', '600688.XSHG', '600570.XSHG'], ['601006.XSHG', '603160.XSHG', '600688.XSHG', '600522.XSHG', '002085.XSHE', '601318.XSHG', '600372.XSHG', '601998.XSHG', '600398.XSHG', '601328.XSHG'], ['601328.XSHG', '601988.XSHG', '601998.XSHG', '601628.XSHG', '601991.XSHG', '601288.XSHG', '600926.XSHG', '600023.XSHG', '603160.XSHG', '600795.XSHG'], ['601328.XSHG', '601988.XSHG', '600000.XSHG', '601166.XSHG', '000895.XSHE', '601169.XSHG', '601601.XSHG', '601318.XSHG', '601398.XSHG', '600036.XSHG'], ['601818.XSHG', '601998.XSHG', '601988.XSHG', '601288.XSHG', '601328.XSHG', '601601.XSHG', '601939.XSHG', '601398.XSHG', '600000.XSHG', '601229.XSHG'], ['000001.XSHE', '600637.XSHG', '601155.XSHG', '601166.XSHG', '000776.XSHE', '601628.XSHG', '600036.XSHG', '000002.XSHE', '601939.XSHG', '601211.XSHG'], ['600919.XSHG', '601727.XSHG', '000876.XSHE', '600362.XSHG', '000776.XSHE', '601898.XSHG', '600690.XSHG', '601398.XSHG', '601169.XSHG', '600958.XSHG'], ['600340.XSHG', '601169.XSHG', '601398.XSHG', '000063.XSHE', '601939.XSHG', '601328.XSHG', '601998.XSHG', '600919.XSHG', '600089.XSHG', '000876.XSHE'], ['601878.XSHG', '600566.XSHG', '600999.XSHG', '000776.XSHE', '000402.XSHE', '600637.XSHG', '002797.XSHE', '603858.XSHG', '601211.XSHG', '000728.XSHE'], ['600958.XSHG', '002236.XSHE', '000776.XSHE', '000423.XSHE', '600588.XSHG', '601669.XSHG', '000725.XSHE', '300144.XSHE', '601901.XSHG', '000783.XSHE'], ['000423.XSHE', '600406.XSHG', '600487.XSHG', '600372.XSHG', '300024.XSHE', '000553.XSHE', '603986.XSHG', '300136.XSHE', '002230.XSHE', '300144.XSHE'], ['600031.XSHG', '002120.XSHE', '000858.XSHE', '000425.XSHE', '601989.XSHG', '600926.XSHG', '002797.XSHE', '300024.XSHE', '601228.XSHG', '601328.XSHG'], ['600519.XSHG', '002468.XSHE', '600585.XSHG', '000002.XSHE', '000661.XSHE', '000568.XSHE', '600031.XSHG', '601021.XSHG', '000651.XSHE', '000876.XSHE'], ['002230.XSHE', '002032.XSHE', '600009.XSHG', '600031.XSHG', '000661.XSHE', '600519.XSHG', '601318.XSHG', '600340.XSHG', '002007.XSHE', '600118.XSHG'], ['600031.XSHG', '002714.XSHE', '300015.XSHE', '000661.XSHE', '601601.XSHG', '000596.XSHE', '000568.XSHE', '600276.XSHG', '601012.XSHG', '000858.XSHE'], ['600519.XSHG', '601012.XSHG', '600009.XSHG', '000568.XSHE', '000002.XSHE', '600809.XSHG', '600570.XSHG', '601838.XSHG', '000661.XSHE', '002001.XSHE']]

    # 优化器设置
    g.optimizer = 5 #设定使用的优化模型
    optimize_model = {
                        1:"模型1：等权重配置",
                        2:"模型2：组合风险平价",
                        3:"模型3：组合风险最小化（最小化组合方差）；组合总权重限制为90%到100%；组合年化收益率目标下限为10%",
                        4:"模型4：组合年化收益率最大化，目标下限为20%；",
                        5:"模型5：组合夏普比率最大化"
                      }
    print("优化%s"%(optimize_model[g.optimizer]))
    
    
    g.buy_list=[]
    g.k =0
    ### 股票相关设定 ###
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')

    ## 运行函数（reference_security为运行时间的参考标的；传入的标的只做种类区分，因此传入'000300.XSHG'或'510300.XSHG'是一样的）
      # 开盘时运行
    run_monthly(market_open, 1, '09:30')

# 规范化
def fucc(a):
    a1a=[]
    for i in a:
        a1a.append(normalize_code(i))
    return a1a

## 开盘时运行函数
def market_open(context):
    
    buy_list0=fucc(g.a[g.k])
    g.k=g.k+1
    print(g.k)
    #total_value = context.portfolio.total_value # 获取总资产
    
    # 卖出去
    if  len(context.portfolio.positions)!=0:
        for stock in context.portfolio.positions.keys():
            if stock not in buy_list0:
                order_target(stock, 0)
                
    g.buy_list=set(buy_list0)-set(context.portfolio.positions.keys())

    # 组合优化模型
    if g.optimizer == 1:
        # 模型1：等权重配置
        optimized_weight = pd.Series(data=[1.0/len(g.buy_list)]*len(g.buy_list),
                                    index=g.buy_list)
    elif g.optimizer == 2:
        # 模型2：组合风险平价；股票的总权重限制为0到90%，ETF的总权重限制为0到10%；每只标的权重不超过10%
        optimized_weight = portfolio_optimizer(date=context.previous_date,
                                    securities = g.buy_list,
                                    target = RiskParity(count=250, risk_budget=None),# risk_budget 为 None默认为每只股票贡献相等
                                    constraints = [WeightConstraint(low=0, high=1.0)],
                                    default_port_weight_range=[0., 1.0],
                                    ftol=1e-09,
                                    return_none_if_fail=True)
    elif g.optimizer == 3:
        # 模型3：组合风险最小化（最小化组合方差）；组合年化收益率目标下限为10%
        optimized_weight = portfolio_optimizer(date=context.previous_date,
                                    securities = g.buy_list,
                                    target = MinVariance(count=250),
                                    constraints = [AnnualProfitConstraint(limit=0.1, count=250)],
                                    bounds=[],
                                    default_port_weight_range=[0., 1.0],
                                    ftol=1e-09,
                                    return_none_if_fail=True)
    elif g.optimizer == 4:
        # 模型4：组合年化收益率目标下限为20%；
        optimized_weight = portfolio_optimizer(date=context.previous_date,
                                    securities = g.buy_list,
                                    target = MaxProfit(count=250),
                                    constraints = [AnnualProfitConstraint(limit=0.2, count=250)],
                                    bounds=[],
                                    default_port_weight_range=[0., 1.0],
                                    ftol=1e-09,
                                    return_none_if_fail=True)
    elif g.optimizer == 5:
        # 模型5：组合夏普比率最大化；
        optimized_weight = portfolio_optimizer(date=context.previous_date,
                                    securities = g.buy_list,
                                    target = MaxSharpeRatio(rf=0.0,weight_sum_equal=1, count=250),#无风险利率为0，最大化夏普比率需要约束组合权重的和为0.5
                                    constraints = [],
                                    default_port_weight_range=[0., 1.0],
                                    ftol=1e-09,
                                    return_none_if_fail=True)

    # 查看优化结果
    print(optimized_weight)

    # 优化失败，给予警告
    if type(optimized_weight) == type(None):
        print('警告：组合优化失败')
    # 按优化结果，执行调仓操作
    
    else:
        total_value = context.portfolio.total_value # 获取总资产
        for stock in optimized_weight.keys():
            value = total_value * optimized_weight[stock] # 确定每个标的的权重
            order_target_value(stock, value) # 调整标的至目标权重
    
    
    # 暂时注释掉
    #buy_list2=set(buy_list)-set(context.portfolio.positions.keys())
    #cash = context.portfolio.available_cash  # 取得当前的现金
    #if  len(buy_list2)!=0:
    #    for stock in  buy_list2:
    #        order_value(stock,cash/len(buy_list2))
                
  